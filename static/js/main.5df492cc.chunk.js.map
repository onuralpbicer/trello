{"version":3,"sources":["slices/columns.slice.ts","components/Modal.tsx","components/AddColumnModal.tsx","redux/store.ts","model/drag.model.ts","components/AddNewEntryModal.tsx","layout/ItemComponent.tsx","layout/ColumnComponent.tsx","hooks/useColumn.ts","layout/App.tsx","hooks/useNumColumns.ts","hooks/useLoadOldSave.ts","index.tsx"],"names":["columnsSlice","createSlice","name","initialState","columns","items","id","text","nextId","reducers","LoadSavedColumns","state","action","payload","AddColumn","push","AddEntryToColumn","colIndex","ClearColumns","MoveEntry","item","sourceCol","targetCol","sourceEntryIndex","splice","actions","useStyles","makeStyles","createStyles","outerContainer","height","width","position","top","left","backgroundColor","zIndex","display","justifyContent","alignItems","innerContainer","ModalInner","props","component","onClose","classes","className","onClick","event","stopPropagation","Modal","show","children","rest","AddColumnModal","dispatch","useDispatch","useState","newColumnName","setNewColumnName","openCreateColumn","setOpenCreateColumn","handleAddColumn","placeholder","value","onChange","target","onKeyDown","key","ctrlKey","shiftKey","autoFocus","disabled","reducer","combineReducers","todo","store","configureStore","window","onbeforeunload","getState","localStorage","setItem","saveKey","JSON","stringify","DragItemTypes","AddNewEntryModal","openNewEntry","setOpenNewEntry","newEntry","setNewEntry","handleCloseNewEntry","handleAddEntry","container","marginTop","border","borderRadius","padding","ItemComponent","card","entryIndex","useDrag","type","TodoItem","startLocation","collect","monitor","isDragging","drag","ref","style","opacity","marginLeft","marginRight","marginBottom","flexDirection","itemContainer","flexGrow","overflow","ColumnComponent","index","useSelector","useDrop","accept","isOver","drop","dragItem","map","pageContainer","flexWrap","App","numColumns","length","useEffect","savedString","getItem","savedState","parse","useLoadSavedColumns","Array","from","_v","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.5df492cc.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { TodoState } from '../model/app.model'\r\nimport { DraggableTodoItem } from '../model/drag.model'\r\n\r\nconst initialState: TodoState = {\r\n    columns: [\r\n        {\r\n            name: 'ToDo',\r\n            items: [\r\n                {\r\n                    id: 0,\r\n                    text: 'Change order of items',\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: 'Done',\r\n            items: [],\r\n        },\r\n    ],\r\n    nextId: 1,\r\n}\r\n\r\nconst columnsSlice = createSlice({\r\n    name: 'columns',\r\n    initialState: initialState,\r\n    reducers: {\r\n        LoadSavedColumns(state, action: PayloadAction<TodoState>) {\r\n            state.columns = action.payload.columns\r\n            state.nextId = action.payload.nextId\r\n        },\r\n        AddColumn(state, action: PayloadAction<{ name: string }>) {\r\n            state.columns.push({\r\n                name: action.payload.name,\r\n                items: [],\r\n            })\r\n        },\r\n        AddEntryToColumn(\r\n            state,\r\n            action: PayloadAction<{ colIndex: number; text: string }>,\r\n        ) {\r\n            const { colIndex, text } = action.payload\r\n            state.columns[colIndex].items.push({\r\n                text,\r\n                id: state.nextId,\r\n            })\r\n            state.nextId++\r\n        },\r\n        ClearColumns(state) {\r\n            state.columns = []\r\n            state.nextId = 0\r\n        },\r\n        MoveEntry(\r\n            state,\r\n            action: PayloadAction<{\r\n                item: DraggableTodoItem\r\n                sourceCol: number\r\n                sourceEntryIndex: number\r\n                targetCol: number\r\n            }>,\r\n        ) {\r\n            const { columns } = state\r\n            const {\r\n                item,\r\n                sourceCol,\r\n                targetCol,\r\n                sourceEntryIndex,\r\n            } = action.payload\r\n            columns[sourceCol].items.splice(sourceEntryIndex, 1)\r\n            columns[targetCol].items.push(item.item)\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    LoadSavedColumns,\r\n    AddColumn,\r\n    AddEntryToColumn,\r\n    ClearColumns,\r\n    MoveEntry,\r\n} = columnsSlice.actions\r\nexport default columnsSlice\r\n","import { createStyles, makeStyles } from '@material-ui/styles'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles(\r\n    createStyles({\r\n        outerContainer: {\r\n            height: '100vh',\r\n            width: '100vw',\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            backgroundColor: '#000000AA',\r\n            zIndex: 1600,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        },\r\n        innerContainer: {\r\n            backgroundColor: 'white',\r\n        },\r\n    }),\r\n)\r\n\r\ninterface CommonProps {\r\n    onClose?: () => void\r\n}\r\n\r\ninterface ModalInnerProps extends CommonProps {\r\n    component: JSX.Element\r\n}\r\n\r\nconst ModalInner = (props: ModalInnerProps): JSX.Element => {\r\n    const { component, onClose } = props\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.outerContainer} onClick={onClose}>\r\n            <div\r\n                className={classes.innerContainer}\r\n                onClick={(event) => event.stopPropagation()}\r\n            >\r\n                {component}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface ModalProps extends CommonProps {\r\n    show?: boolean\r\n    children: JSX.Element\r\n}\r\n\r\nconst Modal = (props: ModalProps): JSX.Element | null => {\r\n    const { show, children, ...rest } = props\r\n\r\n    if (show) return <ModalInner component={children} {...rest} />\r\n    return null\r\n}\r\n\r\nexport default Modal\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { AddColumn } from '../slices/columns.slice'\r\nimport Modal from './Modal'\r\n\r\nconst AddColumnModal = (): JSX.Element => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [newColumnName, setNewColumnName] = useState<string>('')\r\n    const [openCreateColumn, setOpenCreateColumn] = useState<boolean>(false)\r\n\r\n    const handleAddColumn = () => {\r\n        if (newColumnName) {\r\n            dispatch(AddColumn({ name: newColumnName }))\r\n            setNewColumnName('')\r\n            setOpenCreateColumn(false)\r\n        }\r\n    }\r\n\r\n    const handleCloseNewColumn = () => {\r\n        setOpenCreateColumn(false)\r\n        setNewColumnName('')\r\n    }\r\n    return (\r\n        <>\r\n            <Modal show={openCreateColumn} onClose={handleCloseNewColumn}>\r\n                <div>\r\n                    <div>Create New Column</div>\r\n                    <input\r\n                        placeholder=\"Enter Column Name\"\r\n                        value={newColumnName}\r\n                        onChange={(event) =>\r\n                            setNewColumnName(event.target.value)\r\n                        }\r\n                        onKeyDown={(event) => {\r\n                            if (\r\n                                event.key === 'Enter' &&\r\n                                !event.ctrlKey &&\r\n                                !event.shiftKey\r\n                            )\r\n                                handleAddColumn()\r\n                        }}\r\n                        autoFocus\r\n                    />\r\n                    <button onClick={handleAddColumn} disabled={!newColumnName}>\r\n                        Add\r\n                    </button>\r\n                </div>\r\n            </Modal>\r\n            <button onClick={() => setOpenCreateColumn(true)}>\r\n                Add Column\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddColumnModal\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit'\r\nimport columnsSlice from '../slices/columns.slice'\r\n\r\nconst reducer = combineReducers({\r\n    todo: columnsSlice.reducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer,\r\n})\r\n\r\nwindow.onbeforeunload = () => {\r\n    const state = store.getState()\r\n    localStorage.setItem(saveKey, JSON.stringify(state))\r\n}\r\n\r\nexport const saveKey = 'savedState'\r\n","import { EntryLocation } from '../layout/ItemComponent'\r\nimport { Card } from './app.model'\r\n\r\nexport enum DragItemTypes {\r\n    TodoItem = 'TodoItem',\r\n}\r\n\r\nexport type DraggableTodoItem = ItemWithType<Card>\r\n\r\nexport interface ItemWithType<T> {\r\n    type: DragItemTypes.TodoItem\r\n    item: T\r\n    startLocation: EntryLocation\r\n}\r\n\r\nexport interface DragProps {\r\n    isDragging: boolean\r\n}\r\n\r\nexport interface DropProps {\r\n    isOver: boolean\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { AddEntryToColumn } from '../slices/columns.slice'\r\nimport Modal from './Modal'\r\n\r\ninterface AddNewEntryModalProps {\r\n    colIndex: number\r\n}\r\n\r\nconst AddNewEntryModal = (props: AddNewEntryModalProps): JSX.Element => {\r\n    const { colIndex } = props\r\n    const [openNewEntry, setOpenNewEntry] = useState<boolean>(false)\r\n    const [newEntry, setNewEntry] = useState<string>('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleCloseNewEntry = () => {\r\n        setNewEntry('')\r\n        setOpenNewEntry(false)\r\n    }\r\n\r\n    const handleAddEntry = () => {\r\n        if (newEntry) {\r\n            dispatch(AddEntryToColumn({ colIndex, text: newEntry }))\r\n            handleCloseNewEntry()\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={() => setOpenNewEntry(true)}>+</button>\r\n            <Modal show={openNewEntry} onClose={handleCloseNewEntry}>\r\n                <div>\r\n                    <input\r\n                        placeholder=\"message\"\r\n                        value={newEntry}\r\n                        onChange={(event) => setNewEntry(event.target.value)}\r\n                        onKeyDown={(event) => {\r\n                            if (\r\n                                event.key === 'Enter' &&\r\n                                !event.ctrlKey &&\r\n                                !event.shiftKey\r\n                            )\r\n                                handleAddEntry()\r\n                        }}\r\n                        autoFocus\r\n                    />\r\n                    <button disabled={!newEntry} onClick={handleAddEntry}>\r\n                        Add\r\n                    </button>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddNewEntryModal\r\n","import { createStyles, makeStyles } from '@material-ui/styles'\r\nimport React from 'react'\r\nimport { useDrag } from 'react-dnd'\r\nimport { Card } from '../model/app.model'\r\nimport {\r\n    DraggableTodoItem,\r\n    DragItemTypes,\r\n    DragProps,\r\n} from '../model/drag.model'\r\n\r\nconst useStyles = makeStyles(\r\n    createStyles({\r\n        container: {\r\n            marginTop: '8px',\r\n            border: '1px solid lightgrey',\r\n            borderRadius: '4px',\r\n            padding: '4px',\r\n            backgroundColor: 'lightgrey',\r\n        },\r\n    }),\r\n)\r\n\r\nexport interface EntryLocation {\r\n    colIndex: number\r\n    entryIndex: number\r\n}\r\n\r\ninterface ItemComponentProps extends EntryLocation {\r\n    card: Card\r\n}\r\n\r\nconst ItemComponent = (props: ItemComponentProps): JSX.Element => {\r\n    const { card, colIndex, entryIndex } = props\r\n    const classes = useStyles(props)\r\n\r\n    const [{ isDragging }, drag] = useDrag<\r\n        DraggableTodoItem,\r\n        unknown,\r\n        DragProps\r\n    >({\r\n        item: {\r\n            type: DragItemTypes.TodoItem,\r\n            item: card,\r\n            startLocation: {\r\n                colIndex,\r\n                entryIndex,\r\n            },\r\n        },\r\n        collect(monitor) {\r\n            return {\r\n                isDragging: monitor.isDragging(),\r\n            }\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            className={classes.container}\r\n            style={{ opacity: isDragging ? 0.5 : 1 }}\r\n        >\r\n            {card.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemComponent\r\n","import { makeStyles, createStyles } from '@material-ui/styles'\r\nimport React from 'react'\r\nimport { useDrop } from 'react-dnd'\r\nimport { useDispatch } from 'react-redux'\r\nimport AddNewEntryModal from '../components/AddNewEntryModal'\r\nimport { useColumn } from '../hooks/useColumn'\r\nimport {\r\n    DraggableTodoItem,\r\n    DragItemTypes,\r\n    DropProps,\r\n} from '../model/drag.model'\r\nimport { MoveEntry } from '../slices/columns.slice'\r\nimport ItemComponent from './ItemComponent'\r\n\r\nconst useStyles = makeStyles(\r\n    createStyles({\r\n        container: {\r\n            height: '500px',\r\n            width: '300px',\r\n            marginLeft: '8px',\r\n            marginRight: '8px',\r\n            marginBottom: '16px',\r\n            border: '1px solid gray',\r\n            borderRadius: '4px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        itemContainer: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            flexGrow: 1,\r\n            padding: '8px',\r\n            overflow: 'auto',\r\n        },\r\n    }),\r\n)\r\n\r\ninterface ColumnComponentProps {\r\n    colIndex: number\r\n}\r\n\r\nconst ColumnComponent = (props: ColumnComponentProps): JSX.Element => {\r\n    const { colIndex } = props\r\n    const classes = useStyles(props)\r\n\r\n    const { name, items } = useColumn(colIndex)\r\n    const dispatch = useDispatch()\r\n\r\n    const [{ isOver }, drop] = useDrop<DraggableTodoItem, unknown, DropProps>({\r\n        accept: DragItemTypes.TodoItem,\r\n        collect(monitor) {\r\n            return {\r\n                isOver: monitor.isOver(),\r\n            }\r\n        },\r\n        drop(dragItem) {\r\n            dispatch(\r\n                MoveEntry({\r\n                    item: dragItem,\r\n                    sourceCol: dragItem.startLocation.colIndex,\r\n                    sourceEntryIndex: dragItem.startLocation.entryIndex,\r\n                    targetCol: colIndex,\r\n                }),\r\n            )\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div\r\n            className={classes.container}\r\n            ref={drop}\r\n            style={{ backgroundColor: isOver ? 'green' : 'transparent' }}\r\n        >\r\n            <div>\r\n                {name}\r\n                <AddNewEntryModal colIndex={colIndex} />\r\n            </div>\r\n            <div className={classes.itemContainer}>\r\n                {items.map((item, index) => (\r\n                    <ItemComponent\r\n                        key={`${colIndex}${index}${item.id}`}\r\n                        card={item}\r\n                        colIndex={colIndex}\r\n                        entryIndex={index}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColumnComponent\r\n","import { useSelector } from 'react-redux'\r\nimport { AppState, Column } from '../model/app.model'\r\n\r\nexport function useColumn(index: number): Column {\r\n    return useSelector((state: AppState) => state.todo.columns[index])\r\n}\r\n","import { createStyles, makeStyles } from '@material-ui/styles'\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\nimport AddColumnModal from '../components/AddColumnModal'\nimport { useLoadSavedColumns } from '../hooks/useLoadOldSave'\nimport { useNumColumns } from '../hooks/useNumColumns'\nimport { ClearColumns } from '../slices/columns.slice'\nimport ColumnComponent from './ColumnComponent'\n\nconst useStyles = makeStyles(\n    createStyles({\n        pageContainer: {\n            height: '100vh',\n            width: '100vw',\n        },\n        container: {\n            display: 'flex',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n        },\n    }),\n)\n\nconst App = (): JSX.Element => {\n    const classes = useStyles()\n\n    const numColumns = useNumColumns()\n    useLoadSavedColumns()\n    const dispatch = useDispatch()\n\n    return (\n        <div className={classes.pageContainer}>\n            <div>\n                <AddColumnModal />\n                <button onClick={() => dispatch(ClearColumns())}>Clear</button>\n            </div>\n            <div className={classes.container}>\n                {Array.from({ length: numColumns }, (_v, index) => (\n                    <ColumnComponent key={index} colIndex={index} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { useSelector } from 'react-redux'\r\nimport { AppState } from '../model/app.model'\r\n\r\nexport function useNumColumns(): number {\r\n    return useSelector((state: AppState) => state.todo.columns.length)\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { AppState } from '../model/app.model'\r\nimport { saveKey } from '../redux/store'\r\nimport { LoadSavedColumns } from '../slices/columns.slice'\r\n\r\nexport function useLoadSavedColumns(): void {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const savedString = localStorage.getItem(saveKey)\r\n        if (savedString) {\r\n            const savedState: AppState = JSON.parse(savedString)\r\n            if (savedState.todo && savedState.todo.columns)\r\n                dispatch(LoadSavedColumns(savedState.todo))\r\n        }\r\n    }, [])\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './layout/App'\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <DndProvider backend={HTML5Backend}>\n                <App />\n            </DndProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}