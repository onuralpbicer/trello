{"version":3,"sources":["components/Modal.tsx","slices/columns.slice.ts","redux/store.ts","layout/ItemComponent.tsx","layout/ColumnComponent.tsx","hooks/useColumn.ts","layout/App.tsx","hooks/useNumColumns.ts","hooks/useLoadOldSave.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","outerContainer","height","width","position","top","left","backgroundColor","zIndex","display","justifyContent","alignItems","innerContainer","ModalInner","props","component","onClose","classes","className","onClick","event","stopPropagation","Modal","show","children","rest","columnsSlice","createSlice","name","initialState","reducers","LoadSavedColumns","state","action","push","payload","AddColumn","items","AddEntryToColumn","colIndex","entry","ClearColumns","length","actions","reducer","combineReducers","columns","store","configureStore","window","onbeforeunload","localStorage","setItem","saveKey","JSON","stringify","getState","ItemComponent","text","container","maxHeight","marginRight","marginBottom","itemContainer","flexDirection","ColumnComponent","index","dispatch","useDispatch","useSelector","useState","openNewEntry","setOpenNewEntry","newEntry","setNewEntry","handleCloseNewEntry","placeholder","value","onChange","target","autoFocus","disabled","map","item","pageContainer","flexWrap","App","numColumns","useEffect","savedState","parse","getItem","useLoadSavedColumns","newColumnName","setNewColumnName","openCreateColumn","setOpenCreateColumn","Array","from","_v","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.198fa807.chunk.js","sourcesContent":["import { createStyles, makeStyles } from '@material-ui/styles'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles(\r\n    createStyles({\r\n        outerContainer: {\r\n            height: '100vh',\r\n            width: '100vw',\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            backgroundColor: '#000000AA',\r\n            zIndex: 1600,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        },\r\n        innerContainer: {\r\n            backgroundColor: 'white',\r\n        },\r\n    }),\r\n)\r\n\r\ninterface CommonProps {\r\n    onClose?: () => void\r\n}\r\n\r\ninterface ModalInnerProps extends CommonProps {\r\n    component: JSX.Element\r\n}\r\n\r\nconst ModalInner = (props: ModalInnerProps): JSX.Element => {\r\n    const { component, onClose } = props\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.outerContainer} onClick={onClose}>\r\n            <div\r\n                className={classes.innerContainer}\r\n                onClick={(event) => event.stopPropagation()}\r\n            >\r\n                {component}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface ModalProps extends CommonProps {\r\n    show?: boolean\r\n    children: JSX.Element\r\n}\r\n\r\nconst Modal = (props: ModalProps): JSX.Element | null => {\r\n    const { show, children, ...rest } = props\r\n\r\n    if (show) return <ModalInner component={children} {...rest} />\r\n    return null\r\n}\r\n\r\nexport default Modal\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { Card, Column } from '../model/app.model'\r\n\r\nconst columnsSlice = createSlice({\r\n    name: 'columns',\r\n    initialState: [] as Column[],\r\n    reducers: {\r\n        LoadSavedColumns(state, action: PayloadAction<Column[]>) {\r\n            state.push(...action.payload)\r\n        },\r\n        AddColumn(state, action: PayloadAction<{ name: string }>) {\r\n            state.push({\r\n                name: action.payload.name,\r\n                items: [],\r\n            })\r\n        },\r\n        AddEntryToColumn(\r\n            state,\r\n            action: PayloadAction<{ colIndex: number; entry: Card }>,\r\n        ) {\r\n            const { colIndex, entry } = action.payload\r\n            state[colIndex].items.push(entry)\r\n        },\r\n        ClearColumns(state) {\r\n            state.length = 0\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    LoadSavedColumns,\r\n    AddColumn,\r\n    AddEntryToColumn,\r\n    ClearColumns,\r\n} = columnsSlice.actions\r\nexport default columnsSlice\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit'\r\nimport columnsSlice from '../slices/columns.slice'\r\n\r\nconst reducer = combineReducers({\r\n    columns: columnsSlice.reducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer,\r\n})\r\n\r\nwindow.onbeforeunload = () => {\r\n    localStorage.setItem(saveKey, JSON.stringify(store.getState()))\r\n}\r\n\r\nexport const saveKey = 'savedState'\r\n","import React from 'react'\r\nimport { Card } from '../model/app.model'\r\n\r\ntype ItemComponentProps = Card\r\n\r\nconst ItemComponent = (props: ItemComponentProps): JSX.Element => {\r\n    const { text } = props\r\n    return <div>{text}</div>\r\n}\r\n\r\nexport default ItemComponent\r\n","import { makeStyles, createStyles } from '@material-ui/styles'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport Modal from '../components/Modal'\r\nimport { useColumn } from '../hooks/useColumn'\r\nimport { AddEntryToColumn } from '../slices/columns.slice'\r\nimport ItemComponent from './ItemComponent'\r\n\r\nconst useStyles = makeStyles(\r\n    createStyles({\r\n        container: {\r\n            maxHeight: '500px',\r\n            backgroundColor: '#ff000022',\r\n            width: '200px',\r\n            marginRight: '16px',\r\n            marginBottom: '16px',\r\n            '&:last-of-type': {\r\n                marginRight: '0px',\r\n            },\r\n        },\r\n        itemContainer: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n    }),\r\n)\r\n\r\ninterface ColumnComponentProps {\r\n    colIndex: number\r\n}\r\n\r\nconst ColumnComponent = (props: ColumnComponentProps): JSX.Element => {\r\n    const { colIndex } = props\r\n    const classes = useStyles(props)\r\n\r\n    const dispatch = useDispatch()\r\n    const { name, items } = useColumn(colIndex)\r\n\r\n    const [openNewEntry, setOpenNewEntry] = useState<boolean>(false)\r\n    const [newEntry, setNewEntry] = useState<string>('')\r\n\r\n    const handleCloseNewEntry = () => {\r\n        setNewEntry('')\r\n        setOpenNewEntry(false)\r\n    }\r\n\r\n    const handleAddEntry = () => {\r\n        if (newEntry) {\r\n            dispatch(AddEntryToColumn({ colIndex, entry: { text: newEntry } }))\r\n            handleCloseNewEntry()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div>\r\n                {name}\r\n                <button onClick={() => setOpenNewEntry(true)}>+</button>\r\n                <Modal show={openNewEntry} onClose={handleCloseNewEntry}>\r\n                    <div>\r\n                        <input\r\n                            placeholder=\"message\"\r\n                            value={newEntry}\r\n                            onChange={(event) =>\r\n                                setNewEntry(event.target.value)\r\n                            }\r\n                            autoFocus\r\n                        />\r\n                        <button disabled={!newEntry} onClick={handleAddEntry}>\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n            <div className={classes.itemContainer}>\r\n                {items.map((item, index) => (\r\n                    <ItemComponent key={`${colIndex}${index}`} {...item} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColumnComponent\r\n","import { useSelector } from 'react-redux'\r\nimport { AppState, Column } from '../model/app.model'\r\n\r\nexport function useColumn(index: number): Column {\r\n    return useSelector((state: AppState) => state.columns[index])\r\n}\r\n","import { createStyles, makeStyles } from '@material-ui/styles'\nimport React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Modal from '../components/Modal'\nimport { useLoadSavedColumns } from '../hooks/useLoadOldSave'\nimport { useNumColumns } from '../hooks/useNumColumns'\nimport { AddColumn, ClearColumns } from '../slices/columns.slice'\nimport ColumnComponent from './ColumnComponent'\n\nconst useStyles = makeStyles(\n    createStyles({\n        pageContainer: {\n            height: '100vh',\n            width: '100vw',\n        },\n        container: {\n            display: 'flex',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n        },\n    }),\n)\n\nconst App = (): JSX.Element => {\n    const classes = useStyles()\n\n    const numColumns = useNumColumns()\n    useLoadSavedColumns()\n    const dispatch = useDispatch()\n\n    const [newColumnName, setNewColumnName] = useState<string>('')\n    const [openCreateColumn, setOpenCreateColumn] = useState<boolean>(false)\n\n    const handleAddColumn = () => {\n        if (newColumnName) {\n            dispatch(AddColumn({ name: newColumnName }))\n            setNewColumnName('')\n            setOpenCreateColumn(false)\n        }\n    }\n\n    const handleCloseNewColumn = () => {\n        setOpenCreateColumn(false)\n        setNewColumnName('')\n    }\n\n    return (\n        <div className={classes.pageContainer}>\n            <div>\n                <Modal show={openCreateColumn} onClose={handleCloseNewColumn}>\n                    <div>\n                        <div>Create New Column</div>\n                        <input\n                            placeholder=\"Enter Column Name\"\n                            value={newColumnName}\n                            onChange={(event) =>\n                                setNewColumnName(event.target.value)\n                            }\n                            autoFocus\n                        />\n                        <button\n                            onClick={handleAddColumn}\n                            disabled={!newColumnName}\n                        >\n                            Add\n                        </button>\n                    </div>\n                </Modal>\n                <button onClick={() => setOpenCreateColumn(true)}>\n                    Add Column\n                </button>\n                <button onClick={() => dispatch(ClearColumns())}>Clear</button>\n            </div>\n            <div className={classes.container}>\n                {Array.from({ length: numColumns }, (_v, index) => (\n                    <ColumnComponent key={index} colIndex={index} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { useSelector } from 'react-redux'\r\nimport { AppState } from '../model/app.model'\r\n\r\nexport function useNumColumns(): number {\r\n    return useSelector((state: AppState) => state.columns.length)\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { AppState } from '../model/app.model'\r\nimport { saveKey } from '../redux/store'\r\nimport { LoadSavedColumns } from '../slices/columns.slice'\r\n\r\nexport function useLoadSavedColumns(): void {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const savedState: AppState = JSON.parse(\r\n            localStorage.getItem(saveKey) || JSON.stringify({ columns: [] }),\r\n        )\r\n\r\n        dispatch(LoadSavedColumns(savedState.columns))\r\n    }, [])\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './layout/App'\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}